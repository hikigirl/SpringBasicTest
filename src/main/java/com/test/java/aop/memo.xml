<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<!-- memo.xml 스프링 컨테이너 -->
	<!-- 스프링이 제공하는 여러가지 기능, 혜택을 적용하려면 반드시 스프링 빈이어야 한다. -->

	<!-- 주업무: MemoImpl -->
	<bean class="com.test.java.aop.MemoImpl" id="memo"></bean>

	<!-- 보조업무: Logger -->
	<bean class="com.test.java.aop.Logger" id="logger"></bean>

	<!--Spring AOP 설정 -->
	<aop:config>
		<!-- 보조 업무 객체 역할 부여(Role) -->
		<aop:aspect ref="logger">
			<!-- 보조 업무 객체가 주업무들 중 어느 주업무에 개입? - pointcut 지정하기 PointCut => 특정 클래스의 
				특정 메서드 ex) MemoImpl 클래스의 add() 메서드, read() 메서드 등등 PointCut Expression - 어떤 
				클래스 + 어떤 메서드 - AspectJ 표현식 AspectJ 표현식 - execution() 지시자 - execution([접근지정자] 
				반환형 [패키지.클래스].메서드(인자)) - execution(public void com.test.java.aop.MemoImpl.add(String)) 
				- within() 지시자 -->
			<aop:pointcut
				expression="execution(public void com.test.java.aop.MemoImpl.memo_add(String))"
				id="p1" />
			<aop:pointcut
				expression="execution(public String com.test.java.aop.MemoImpl.memo_read(String))"
				id="p2" />
			<aop:pointcut
				expression="execution(public boolean com.test.java.aop.MemoImpl.edit(String,String))"
				id="p3" />
			<aop:pointcut
				expression="execution(public boolean com.test.java.aop.MemoImpl.del(String))"
				id="p4" />
			<aop:pointcut
				expression="execution(* com.test.java.aop.MemoImpl.*(..))" id="p5" />
			<aop:pointcut
				expression="execution(* add(..))" id="p6" /> <!-- 엄청 넓은 범위도 지정할 수 있기는 하지만 자주 사용하지는 않음 -->
			<aop:pointcut
				expression="execution(public void com.test.java.aop.MemoImpl.memo_add(String)) || execution(public String com.test.java.aop.MemoImpl.memo_read(String))"
				id="p7" />
			<aop:pointcut
				expression="execution(* com.test.java.aop.MemoImpl.memo_*(String))"
				id="p8" />

			<!-- 주업무 실행 중 어느 시점에 보조 업무가 개입할지? -->
			<!-- PointCut + 보조업무객체.메서드() 결합 => Weaving(위빙) -->

			<!-- 주업무(pointcut-ref) + 보조업무(method) -->
			<!-- <aop:after method="log" pointcut-ref="p1" />
			<aop:after method="log" pointcut-ref="p2" />
			<aop:after method="log" pointcut-ref="p3" />
			<aop:after method="log" pointcut-ref="p4" /> -->
			<!-- <aop:after method="log" pointcut-ref="p5" /> -->
			<!-- <aop:after method="log" pointcut-ref="p6" /> -->
			<!-- <aop:after method="log" pointcut-ref="p7" /> -->
			<!-- <aop:after method="log" pointcut-ref="p8" /> -->
			
			
			<!-- 위빙 시점 관련-->
			<!-- Before, After -->
			<!-- <aop:before method="log" pointcut-ref="p1"/> -->
			
			<!-- around -->
			<aop:around method="around" pointcut-ref="p5"/>

		</aop:aspect>

	</aop:config>

</beans>